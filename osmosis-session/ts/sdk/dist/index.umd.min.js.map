{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/CounterContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  decrement: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n};\nexport interface GetCountResponse {\n  count: number;\n  [k: string]: unknown;\n}\nexport interface GetVersionResponse {\n  contract: string;\n  version: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  count: number;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_count: {\n    [k: string]: unknown;\n  };\n} | {\n  get_version: {\n    [k: string]: unknown;\n  };\n};\nexport type Addr = string;\nexport interface State {\n  count: number;\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface CounterReadOnlyInterface {\n  contractAddress: string;\n  getCount: () => Promise<GetCountResponse>;\n  getVersion: () => Promise<GetVersionResponse>;\n}\nexport class CounterQueryClient implements CounterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getCount = this.getCount.bind(this);\n    this.getVersion = this.getVersion.bind(this);\n  }\n\n  getCount = async (): Promise<GetCountResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_count: {}\n    });\n  };\n  getVersion = async (): Promise<GetVersionResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_version: {}\n    });\n  };\n}\nexport interface CounterInterface extends CounterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  increment: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  decrement: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  reset: ({\n    count\n  }: {\n    count: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class CounterClient extends CounterQueryClient implements CounterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      increment: {}\n    }, fee, memo, funds);\n  };\n  decrement = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      decrement: {}\n    }, fee, memo, funds);\n  };\n  reset = async ({\n    count\n  }: {\n    count: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      reset: {\n        count\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["CounterQueryClient","client","contractAddress","_this","this","getCount","__awaiter","queryContractSmart","get_count","getVersion","get_version","bind","CounterClient","_super","sender","call","increment","fee","memo","funds","execute","_a","decrement","reset","count","_b","__extends"],"mappings":";;;;;gxDAuDA,IAAAA,EAIE,SAAYC,EAAwBC,GAApC,IAKCC,EAAAC,KAEDA,KAAAC,SAAW,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACT,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,UAAW,CAAE,YAGjBJ,KAAAK,WAAa,WAAA,OAAAH,EAAAH,OAAA,OAAA,GAAA,sCACX,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DQ,YAAa,CAAE,YAbjBN,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,SAAWD,KAAKC,SAASM,KAAKP,MACnCA,KAAKK,WAAaL,KAAKK,WAAWE,KAAKP,KACxC,EAwBHQ,EAAA,SAAAC,GAKE,SAAAD,EAAYX,EAA+Ba,EAAgBZ,GAA3D,IAAAC,EACEU,EAAME,KAAAX,KAAAH,EAAQC,IAOfE,YAEDD,EAAAa,UAAY,SAAOC,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAChD,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEc,UAAW,CAAE,GACZC,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOE,kBAITlB,EAAAmB,UAAY,SAAOL,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAChD,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEoB,UAAW,CAAE,GACZL,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOE,kBAITlB,EAAKoB,MAAG,SAAOF,EAIZJ,EAAwCC,EAAeC,GAHxD,IAAAK,EAAKH,EAAAG,kBAGJ,IAAAP,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEqB,MAAO,CACLC,MAAKA,IAENP,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOM,kBAvBPtB,EAAKF,OAASA,EACdE,EAAKW,OAASA,EACdX,EAAKD,gBAAkBA,EACvBC,EAAKa,UAAYb,EAAKa,UAAUL,KAAKR,GACrCA,EAAKmB,UAAYnB,EAAKmB,UAAUX,KAAKR,GACrCA,EAAKoB,MAAQpB,EAAKoB,MAAMZ,KAAKR,IAC9B,CAuBH,0PApCmCuB,CAAkBd,EAAAC,GAoCpDD,CAAD,CApCA,CAAmCZ"}